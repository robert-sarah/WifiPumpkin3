#!/bin/bash
# üîç Script de diagnostic Evil Twin WiFiPumpkin3
# Automatise la d√©tection et la r√©solution des probl√®mes

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

echo "üîç Diagnostic Evil Twin WiFiPumpkin3"
echo "===================================="
echo ""

# V√©rification des privil√®ges root
if [ "$EUID" -ne 0 ]; then
    print_error "Ce script doit √™tre ex√©cut√© en tant que root"
    print_warning "Utilisez: sudo $0"
    exit 1
fi

print_success "Privil√®ges root confirm√©s"

# V√©rification des interfaces WiFi
print_status "V√©rification des interfaces WiFi..."

INTERFACES=()
for interface in /sys/class/net/*; do
    if [ -d "$interface" ]; then
        interface_name=$(basename "$interface")
        if iwconfig "$interface_name" 2>/dev/null | grep -q "IEEE 802.11"; then
            INTERFACES+=("$interface_name")
        fi
    fi
done

if [ ${#INTERFACES[@]} -eq 0 ]; then
    print_error "Aucune interface WiFi d√©tect√©e"
    print_status "Solutions possibles :"
    echo "   - V√©rifier que la carte WiFi est connect√©e"
    echo "   - Installer les drivers appropri√©s"
    echo "   - V√©rifier que le module WiFi est charg√©"
    echo "   - Red√©marrer le service r√©seau"
    exit 1
fi

PRIMARY_INTERFACE="${INTERFACES[0]}"
print_success "Interface WiFi principale: $PRIMARY_INTERFACE"

# V√©rification du mode de l'interface
print_status "V√©rification du mode de l'interface..."

if iwconfig "$PRIMARY_INTERFACE" 2>/dev/null | grep -q "Mode:Monitor"; then
    print_success "Interface en mode monitor"
    MONITOR_INTERFACE="$PRIMARY_INTERFACE"
else
    print_warning "Interface pas en mode monitor"
    print_status "Tentative d'activation du mode monitor..."
    
    # Arr√™ter NetworkManager si actif
    if systemctl is-active --quiet NetworkManager; then
        print_status "Arr√™t de NetworkManager..."
        systemctl stop NetworkManager
    fi
    
    # Activer le mode monitor
    if airmon-ng start "$PRIMARY_INTERFACE" >/dev/null 2>&1; then
        MONITOR_INTERFACE="${PRIMARY_INTERFACE}mon"
        print_success "Mode monitor activ√©: $MONITOR_INTERFACE"
    else
        print_error "Impossible d'activer le mode monitor"
        print_status "V√©rifier les drivers WiFi et les permissions"
        MONITOR_INTERFACE="$PRIMARY_INTERFACE"
    fi
fi

# V√©rification des services DHCP
print_status "V√©rification des services DHCP..."

DHCP_CONFLICTS=()
if systemctl is-active --quiet dhcpd; then
    DHCP_CONFLICTS+=("dhcpd")
fi

if systemctl is-active --quiet dnsmasq; then
    DHCP_CONFLICTS+=("dnsmasq")
fi

if netstat -tulpn 2>/dev/null | grep -q ":67"; then
    DHCP_CONFLICTS+=("port_67")
fi

if [ ${#DHCP_CONFLICTS[@]} -ne 0 ]; then
    print_warning "Conflits DHCP d√©tect√©s: ${DHCP_CONFLICTS[*]}"
    print_status "Arr√™t des services DHCP..."
    
    for service in "${DHCP_CONFLICTS[@]}"; do
        case $service in
            "dhcpd")
                systemctl stop dhcpd 2>/dev/null || true
                print_status "Service dhcpd arr√™t√©"
                ;;
            "dnsmasq")
                systemctl stop dnsmasq 2>/dev/null || true
                print_status "Service dnsmasq arr√™t√©"
                ;;
            "port_67")
                print_status "Port 67 utilis√©, v√©rifier les processus..."
                netstat -tulpn | grep :67
                ;;
        esac
    done
else
    print_success "Aucun conflit DHCP d√©tect√©"
fi

# V√©rification de la configuration r√©seau
print_status "V√©rification de la configuration r√©seau..."

# V√©rifier l'adresse IP de l'interface
if ip addr show "$MONITOR_INTERFACE" 2>/dev/null | grep -q "inet"; then
    IP_ADDR=$(ip addr show "$MONITOR_INTERFACE" | grep "inet" | awk '{print $2}' | cut -d/ -f1)
    print_success "Interface $MONITOR_INTERFACE a l'IP: $IP_ADDR"
else
    print_warning "Interface $MONITOR_INTERFACE n'a pas d'adresse IP"
    print_status "Configuration de l'adresse IP..."
    
    # Configurer l'interface
    ip addr add 192.168.1.1/24 dev "$MONITOR_INTERFACE" 2>/dev/null || true
    ip link set "$MONITOR_INTERFACE" up
    
    print_success "Interface $MONITOR_INTERFACE configur√©e avec 192.168.1.1/24"
fi

# V√©rification des routes
print_status "V√©rification des routes..."

if ip route show | grep -q "192.168.1.0/24"; then
    print_success "Route 192.168.1.0/24 configur√©e"
else
    print_warning "Route 192.168.1.0/24 manquante"
    print_status "Ajout de la route..."
    ip route add 192.168.1.0/24 dev "$MONITOR_INTERFACE" 2>/dev/null || true
fi

# V√©rification du forwarding IP
print_status "V√©rification du forwarding IP..."

if [ "$(cat /proc/sys/net/ipv4/ip_forward)" -eq 1 ]; then
    print_success "IP forwarding activ√©"
else
    print_warning "IP forwarding d√©sactiv√©"
    print_status "Activation du forwarding IP..."
    echo 1 > /proc/sys/net/ipv4/ip_forward
    print_success "IP forwarding activ√©"
fi

# V√©rification de la connectivit√© Internet
print_status "V√©rification de la connectivit√© Internet..."

if ping -c 1 8.8.8.8 >/dev/null 2>&1; then
    print_success "Connectivit√© Internet OK"
else
    print_warning "Pas de connectivit√© Internet"
    print_status "V√©rifier la configuration r√©seau"
fi

# V√©rification des outils n√©cessaires
print_status "V√©rification des outils n√©cessaires..."

TOOLS=("aircrack-ng" "dnsmasq" "iptables")
MISSING_TOOLS=()

for tool in "${TOOLS[@]}"; do
    if ! command -v "$tool" &> /dev/null; then
        MISSING_TOOLS+=("$tool")
    fi
done

if [ ${#MISSING_TOOLS[@]} -ne 0 ]; then
    print_error "Outils manquants: ${MISSING_TOOLS[*]}"
    print_status "Installation des outils manquants..."
    apt update
    apt install -y "${MISSING_TOOLS[@]}"
else
    print_success "Tous les outils n√©cessaires sont disponibles"
fi

# Configuration automatique d'iptables
print_status "Configuration d'iptables..."

# Nettoyer les r√®gles existantes
iptables -F 2>/dev/null || true
iptables -t nat -F 2>/dev/null || true

# Trouver l'interface Internet
INTERNET_INTERFACE=""
for interface in eth0 eth1 wlan1; do
    if ip link show "$interface" >/dev/null 2>&1; then
        INTERNET_INTERFACE="$interface"
        break
    fi
done

if [ -n "$INTERNET_INTERFACE" ]; then
    # Configurer NAT
    iptables -t nat -A POSTROUTING -o "$INTERNET_INTERFACE" -j MASQUERADE
    iptables -A FORWARD -i "$MONITOR_INTERFACE" -o "$INTERNET_INTERFACE" -j ACCEPT
    iptables -A FORWARD -i "$INTERNET_INTERFACE" -o "$MONITOR_INTERFACE" -m state --state RELATED,ESTABLISHED -j ACCEPT
    
    print_success "NAT configur√© via $INTERNET_INTERFACE"
else
    print_warning "Interface Internet non trouv√©e"
fi

# Test de configuration DHCP
print_status "Test de configuration DHCP..."

# Cr√©er une configuration dnsmasq temporaire
cat > /tmp/dnsmasq_test.conf << EOF
interface=$MONITOR_INTERFACE
dhcp-range=192.168.1.100,192.168.1.200,255.255.255.0,24h
dhcp-option=3,192.168.1.1
dhcp-option=6,192.168.1.1
server=8.8.8.8
log-queries
log-dhcp
EOF

# Tester dnsmasq
if dnsmasq -C /tmp/dnsmasq_test.conf --test 2>/dev/null; then
    print_success "Configuration DHCP valide"
else
    print_error "Erreur dans la configuration DHCP"
fi

# Nettoyer le fichier temporaire
rm -f /tmp/dnsmasq_test.conf

echo ""
echo "üéØ DIAGNOSTIC TERMIN√â"
echo "====================="
echo ""
print_success "R√©sum√© des v√©rifications :"
echo "  ‚úÖ Privil√®ges root"
echo "  ‚úÖ Interface WiFi: $PRIMARY_INTERFACE"
echo "  ‚úÖ Mode monitor: $MONITOR_INTERFACE"
echo "  ‚úÖ Services DHCP v√©rifi√©s"
echo "  ‚úÖ Configuration r√©seau"
echo "  ‚úÖ Routes configur√©es"
echo "  ‚úÖ IP forwarding activ√©"
echo "  ‚úÖ Outils n√©cessaires"
echo "  ‚úÖ Configuration NAT"
echo "  ‚úÖ Configuration DHCP"
echo ""
print_status "Votre Evil Twin devrait maintenant fonctionner !"
echo ""
print_warning "Si le probl√®me persiste, v√©rifiez :"
echo "  - Les logs dnsmasq: sudo tail -f /var/log/dnsmasq.log"
echo "  - Les logs syst√®me: sudo journalctl -f"
echo "  - La connectivit√©: ping 8.8.8.8"
echo "  - Les clients connect√©s: sudo arp -a" 